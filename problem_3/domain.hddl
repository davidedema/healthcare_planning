(define (domain healthcare)

  ; Extension of domain 1.3
  ; In this domain there are more types of box_robot
  ;   earth
  ;     shilded
  ;     non shilded
  ;   flying
  ; Now robot has carrier with capacity

  (:requirements :strips :typing :hierachie)

  (:types
    location unit robot box supply person carrier - object
    guide_robot - robot
    box_robot - robot
    earth_robot flying_robot - box_robot
    shilded_bot non_shilded_bot - earth_robot
    slot - carrier
    normal_location dangerous_location - location
  )

  (:predicates

    ; LOCATION
    (adjacent ?l1 ?l2 - location)
    (belongs ?u - unit ?l - location)

    ; ROBOT
    (atl ?r - robot ?u - location)
    (has ?r - box_robot ?c - carrier)
    (free ?r - robot)

    ; BOX
    (at ?b - box ?l - location)
    (has_supply ?b - box ?s - supply)
    (empty ?b - box)

    ; CARRIER
    (at_location_carrier ?c - carrier ?l - location) ; location of the carrier
    (contains ?c - carrier ?b - box) ; keep track of box in the carrier
    (has_slot ?c - carrier ?sl - slot) ; keep track of slots in the carrier
    (empty_slot ?sl - slot) ; if a slot is empty

    ; SUPPLY
    (has_supply_at ?s - supply ?l - location)
    (has_unit ?s - supply ?u - unit)

    ; PERSON
    (in ?p - person ?u - unit)
    (inl ?p - person ?l - location)
    (accompanying ?r - guide_robot ?p - person)
  )

  ; ####################################################################

  ; TASKS

  ;; BOXES STUFF
  (:task complete_order_task
    :parameters (?s - supply ?u - unit)
    :precondition ()
    :effect ()
  )

  (:task load_supply_task
    :parameters (?s - supply)
    :precondition ()
    :effect ()
  )

  (:task unload_supply_task
    :parameters (?s - supply ?u - unit)
    :precondition ()
    :effect ()
  )

  ;; MOTION STUFF
  (:task go_to_task
    :parameters (?r - robot ?l - normal_location)
    :precondition ()
    :effect ()
  )

  (:task go_to_carrier
    :parameters (?r - box_robot ?l - location ?c - carrier)
    :precondition ()
    :effect ()
  )

  (:task fly_task 
    :parameters(?r - flying_robot ?to - location ?c - carrier)
    :precondition ()
    :effect ()
  )

  ;; ACCOMPANY STUFF
  (:task start_accompany_task
    :parameters (?p - person)
    :precondition ()
    :effect ()
  )
  (:task accompany_task
    :parameters (?p - person ?u - unit)
    :precondition ()
    :effect ()
  )
  (:task guide_task
    :parameters (?p - person ?u - unit)
    :precondition ()
    :effect ()
  )

  ;####################################################################

  ; METHODS

  ;; MOTION METHODS

  ;;; CARRIER MOTION
  (:method m_go_to_carrier
    :parameters (?l1 - location ?l2 - location ?r - robot ?c - carrier)
    :task
    (go_to_carrier ?r ?l2 ?c)
    :subtasks
    (and
      (task0
        (move_carrier ?r ?l1 ?l2 ?c))
    )
  )

  (:method m_recursive_go_to_carrier
    :parameters (?l2 - location ?l3 - location ?r - robot ?c - carrier)
    :task
    (go_to_carrier ?r ?l3 ?c)
    :subtasks
    (and
      (task0
        (go_to_carrier ?r ?l2 ?c))
      (task1
        (move_carrier ?r ?l2 ?l3 ?c))
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  (:method m_stop_recursion_carrier
    :parameters (?l - location ?r - robot ?c - carrier)
    :task
    (go_to_carrier ?r ?l ?c)
    :subtasks
    (and
      (task0
        (noop ?r ?l))
    )
  )


  ;;; CARRIER MOTION SHILDED
  (:method m_go_to_carrier_shilded
    :parameters (?l1 - location ?l2 - dangerous_location ?r - shilded_bot ?c - carrier)
    :task
    (go_to_carrier ?r ?l2 ?c)
    :subtasks
    (and
      (task0
        (move_carrier_shiled ?r ?l1 ?l2 ?c))
    )
  )

  (:method m_recursive_go_to_carrier_shilded
    :parameters (?l2 - location ?l3 - location ?r - shilded_bot ?c - carrier)
    :task
    (go_to_carrier ?r ?l3 ?c)
    :subtasks
    (and
      (task0
        (go_to_carrier ?r ?l2 ?c))
      (task1
        (move_carrier_shiled ?r ?l2 ?l3 ?c))
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  (:method m_stop_recursion_carrier_shilded
    :parameters (?l - dangerous_location ?r - shilded_bot ?c - carrier)
    :task
    (go_to_carrier ?r ?l ?c)
    :subtasks
    (and
      (task0
        (noop ?r ?l))
    )
  )



  ;;; ROBOT MOTION
  (:method m_go_to
    :parameters (?l1 - location ?l2 - location ?r - robot)
    :task
    (go_to_task ?r ?l2)
    :subtasks
    (and
      (task0
        (move ?r ?l1 ?l2))
    )
  )

  (:method m_recursive_go_to
    :parameters (?l2 - location ?l3 - location ?r - robot)
    :task
    (go_to_task ?r ?l3)
    :subtasks
    (and
      (task0
        (go_to_task ?r ?l2))
      (task1
        (move ?r ?l2 ?l3))
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  (:method m_stop_recursion
    :parameters (?l - location ?r - robot)
    :task
    (go_to_task ?r ?l)
    :subtasks
    (and
      (task0
        (noop ?r ?l))
    )
  )

  ;;; FLY MOTION

  (:method m_fly
    :parameters (?r - flying_robot ?from - location ?to - location ?c - carrier)
    :task
    (fly_task ?r ?to ?c)
    :subtasks
    (and
      (task0
        (fly_carrier ?r ?from ?to ?c))
    )
  )

  ;; SUPPLY METHODS

  ;;; LOAD SUPPLY METHOD
  (:method m_load_supply
    :parameters (?r - earth_robot ?l - location ?c - carrier ?b - box ?s - supply ?sl - slot
    )
    :task
    (load_supply_task ?s)
    :subtasks(and
      (task0
        (go_to_carrier ?r ?l ?c)
      )
      (task1
        (load_carrier ?b ?s ?r ?l ?c ?sl)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  ;;; DELIVER SUPPLY METHOD
  (:method m_deliver_supply
    :parameters (?r - earth_robot ?l - location ?c - carrier ?b - box ?s - supply ?sl - slot ?u - unit
    )
    :task
    (unload_supply_task ?s ?u)
    :subtasks(and
      (task0
        (go_to_carrier ?r ?l ?c)
      )
      (task1
        (unload_carrier ?b ?s ?r ?l ?u ?c ?sl)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  ;;; COMPLETE ORDER
  (:method m_complete_order
    :parameters (?s - supply ?u - unit)
    :task
    (complete_order_task ?s ?u)
    :subtasks(and
      (task0
        (load_supply_task ?s)
      )
      (task1
        (unload_supply_task ?s ?u)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

;;; LOAD SUPPLY METHOD
  (:method m_load_supply_fly
    :parameters (?r - flying_robot ?l - location ?c - carrier ?b - box ?s - supply ?sl - slot
    )
    :task
    (load_supply_task ?s)
    :subtasks(and
      (task0
        (fly_task ?r ?l ?c)
      )
      (task1
        (load_carrier ?b ?s ?r ?l ?c ?sl)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  ;;; DELIVER SUPPLY METHOD
  (:method m_deliver_supply_fly
    :parameters (?r - flying_robot ?l - location ?c - carrier ?b - box ?s - supply ?sl - slot ?u - unit
    )
    :task
    (unload_supply_task ?s ?u)
    :subtasks(and
      (task0
        (fly_task ?r ?l ?c)
      )
      (task1
        (unload_carrier ?b ?s ?r ?l ?u ?c ?sl)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  ;; ACCOMPANY METHODS

  ;;; START ACCOMPANY
  (:method m_start_accompany
    :parameters (?r - guide_robot ?l - location ?p - person)
    :task
    (start_accompany_task ?p)
    :subtasks(and
      (task0
        (go_to_task ?r ?l)
      )
      (task1
        (start_accompany ?r ?l ?p)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  ;;; ACCOMPANY

  (:method m_accompany
    :parameters (?r - guide_robot ?l - location ?p - person ?u - unit)
    :task
    (accompany_task ?p ?u)
    :subtasks(and
      (task0
        (go_to_task ?r ?l)
      )
      (task1
        (accompany ?r ?l ?p ?u)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  ;;; GUIDE

  (:method m_guide
    :parameters (?p - person ?u - unit)
    :task
    (guide_task ?p ?u)
    :subtasks(and
      (task0
        (start_accompany_task ?p)
      )
      (task1
        (accompany_task ?p ?u)
      )
    )
    :ordering
    (and
      (task0 < task1)
    )
  )

  ;##################################################################################

  ;; NOOP action for stopping the recursion on the motion
  (:action noop
    :parameters (?r - robot ?l - location)
    :precondition (and (atl ?r ?l))
    :effect ()
  )

  ; a flying_robot could go from point A to point B also 
  ; if the two are not connected
  (:action fly_carrier
    :parameters (?r - flying_robot ?from - location ?to - normal_location ?c - carrier)
    :precondition (and (atl ?r ?from) (has ?r ?c) (at_location_carrier ?c ?from))
    :effect (and (not (atl ?r ?from)) (not(at_location_carrier ?c ?from)) (atl ?r ?to) (at_location_carrier ?c ?to))
  )

  ; move the robot with the carrier
  (:action move_carrier
    :parameters (?r - box_robot ?from - location ?to - normal_location ?c - carrier)
    :precondition (and (atl ?r ?from) (adjacent ?from ?to) (has ?r ?c) (at_location_carrier ?c ?from))
    :effect (and (not (atl ?r ?from)) (not(at_location_carrier ?c ?from)) (atl ?r ?to) (at_location_carrier ?c ?to))
  )

  (:action move
    :parameters (?r - robot ?from - location ?to - normal_location)
    :precondition (and (atl ?r ?from) (adjacent ?from ?to))
    :effect (and (not (atl ?r ?from)) (atl ?r ?to))
  )

  ; move with the carrier into dangerous locations if the robot is shilded 
  (:action move_carrier_shiled
    :parameters (?r - shilded_bot ?from - location ?to - dangerous_location ?c - carrier)
    :precondition (and (atl ?r ?from) (adjacent ?from ?to) (has ?r ?c) (at_location_carrier ?c ?from))
    :effect (and (not (atl ?r ?from)) (not(at_location_carrier ?c ?from)) (atl ?r ?to) (at_location_carrier ?c ?to))
  )

  ; move into dangerous locations if the robot is shilded 
  (:action move_shield
    :parameters (?r - shilded_bot ?from - location ?to - dangerous_location)
    :precondition (and (atl ?r ?from) (adjacent ?from ?to))
    :effect (and (not (atl ?r ?from)) (atl ?r ?to))
  )

  ; load supply into box and put in a slot of the carrier
  (:action load_carrier
    :parameters (?b - box ?s - supply ?r - box_robot ?l - location ?c - carrier ?sl - slot)
    :precondition (and (empty ?b) (at ?b ?l) (atl ?r ?l) (free ?r) (has_supply_at ?s ?l) (has ?r ?c) (at_location_carrier ?c ?l) (has_slot ?c ?sl) (empty_slot ?sl))
    :effect (and (not (empty ?b)) (not (free ?r)) (not (empty_slot ?sl)) (has_supply ?b ?s) (contains ?sl ?b) (not (at ?b ?l)))
  )

  ; deliver supply to unit and leave box in location and empty the slot
  (:action unload_carrier
    :parameters (?b - box ?s - supply ?r - box_robot ?l - location ?u - unit ?c - carrier ?sl - slot)
    :precondition (and (has_supply ?b ?s) (atl ?r ?l) (belongs ?u ?l) (has ?r ?c) (has_slot ?c ?sl) (contains ?sl ?b) (at_location_carrier ?c ?l))
    :effect (and (free ?r) (empty ?b) (has_unit ?s ?u) (not (has_supply ?b ?s)) (empty_slot ?sl) (not (contains ?sl ?b)) (at ?b ?l))
  )

  (:action start_accompany
    :parameters (?r - guide_robot ?l - location ?p - person)
    :precondition (and (atl ?r ?l) (inl ?p ?l))
    :effect (and (accompanying ?r ?p) (not(inl ?p ?l)))
  )

  (:action accompany
    :parameters (?r - guide_robot ?l - location ?p - person ?u - unit)
    :precondition (and (atl ?r ?l) (belongs ?u ?l) (accompanying ?r ?p))
    :effect (and (not (accompanying ?r ?p)) (in ?p ?u) (inl ?p ?l))
  )
)